#!/bin/sh
mwan3_track()
{
	[ -e /var/run/mwan3track-$DEVICE.pid ] && kill $(cat /var/run/mwan3track-$DEVICE.pid) && rm /var/run/mwan3track-$DEVICE.pid

	local track_ips
	local reliability
	local count
	local timeout
	local interval
	local down
	local up

	mwan3_list_track_ips()
	{
		track_ips="$1 $track_ips"
	}
	config_list_foreach $INTERFACE track_ip mwan3_list_track_ips

	if [ -n "$track_ips" ]; then
		config_get reliability $INTERFACE reliability 1
		config_get count $INTERFACE count 1
		config_get timeout $INTERFACE timeout 4
		config_get interval $INTERFACE interval 10
		config_get down $INTERFACE down 5
		config_get up $INTERFACE up 5
        	[ -x /usr/sbin/mwan3track ] && /usr/sbin/mwan3track $INTERFACE $DEVICE $reliability $count $timeout $interval $down $up $track_ips &
	fi
}

mwan3_setup_basic_iptables_rules()
{
	if ! iptables -S mwan3_rules -t mangle &> /dev/null; then
		iptables -N mwan3_rules -t mangle
	fi

	if ! iptables -S mwan3_default -t mangle &> /dev/null; then
		iptables -N mwan3_default -t mangle
	fi

	if ! iptables -S mwan3_pre -t mangle &> /dev/null; then
		iptables -N mwan3_pre -t mangle
	fi

	if ! iptables -S mwan3_post -t mangle &> /dev/null; then
		iptables -N mwan3_post -t mangle
	fi

	if ! iptables -S mwan3_pre -t mangle | grep restore-mark &> /dev/null; then
		iptables -F mwan3_pre -t mangle
		iptables -A mwan3_pre -t mangle -j CONNMARK --restore-mark --nfmask 65280 --ctmask 65280
		iptables -A mwan3_pre -t mangle -m mark ! --mark 32768/32768 -j mwan3_default
		iptables -A mwan3_pre -t mangle -m mark --mark 0/65280 -j mwan3_rules
	fi

	if ! iptables -S mwan3_post -t mangle | grep save-mark &> /dev/null; then
		iptables -F mwan3_post -t mangle
		iptables -A mwan3_post -t mangle -m mark --mark 32768/32768 -j MARK --set-xmark 0/32768
		iptables -A mwan3_post -t mangle -j CONNMARK --save-mark --nfmask 65280 --ctmask 65280
	fi

	iptables -D mwan3_pre -t mangle -i $DEVICE -j MARK --set-xmark $((($interface_number*256)+32768))/65280 &> /dev/null
	iptables -I mwan3_pre 2 -t mangle -i $DEVICE -j MARK --set-xmark $((($interface_number*256)+32768))/65280 &> /dev/null

	iptables -D mwan3_post -t mangle -o $DEVICE -m mark ! --mark 32768/32768 -j MARK --set-xmark $(($interface_number*256))/65280 &> /dev/null
	iptables -I mwan3_post 1 -t mangle -o $DEVICE -m mark ! --mark 32768/32768 -j MARK --set-xmark $(($interface_number*256))/65280 &> /dev/null

	if ! iptables -S PREROUTING -t mangle | grep mwan3_pre &> /dev/null; then
		iptables -A PREROUTING -t mangle -j mwan3_pre
	fi

	if ! iptables -S INPUT -t mangle | grep mwan3_post &> /dev/null; then
		iptables -A INPUT -t mangle -j mwan3_post
	fi

	if ! iptables -S OUTPUT -t mangle | grep mwan3_pre &> /dev/null; then
		iptables -A OUTPUT -t mangle -j mwan3_pre
	fi

	if ! iptables -S POSTROUTING -t mangle | grep mwan3_post &> /dev/null; then
		iptables -A POSTROUTING -t mangle -j mwan3_post
	fi

	iptables -F mwan3_rules -t mangle
}

mwan3_get_weight_iface()
{
	old_iface=$(uci show -P /var/state network | awk -F'=' ' $2 == ( "'$old_device'" ) ' | grep ifname | awk -F'.' ' { print $2 } ' | grep -v '@')

	for c in $(uci get mwan3.$current_policy.use_member); do
		if [ $(uci get -P /var/state mwan3.$c.interface) = $old_iface ]; then
			old_weight=$(uci get -P /var/state mwan3.$c.weight)
		fi
	done
}

mwan3_add_iptables_rule()
{
	case $proto in
		icmp)
		iptables -I mwan3_rules $rulenumber -t mangle -p "$proto" -s "$src_ip" -d "$dest_ip" -m mark --mark 0/65280 $probability -j MARK --set-xmark $(($ifvalue*256))/65280 &> /dev/null
		;;
		tcp|udp)
		iptables -I mwan3_rules $rulenumber -t mangle -p "$proto" -s "$src_ip" -d "$dest_ip" -m multiport --sports "$src_port" -m multiport --dports "$dest_port" -m mark --mark 0/65280 $probability -j MARK --set-xmark $(($ifvalue*256))/65280 &> /dev/null
		;;
		*)
		iptables -I mwan3_rules $rulenumber -t mangle -s "$src_ip" -d "$dest_ip" -m mark --mark 0/65280 $probability -j MARK --set-xmark $(($ifvalue*256))/65280 &> /dev/null
		;;
	esac
}

mwan3_update_policy_iptables_rules()
{
	local proto
	local equalize
	local src_ip
	local src_port
	local dest_ip
	local dest_port
	local current_policy
	local lowest_metric
	local equalize_ifaces
	local rulenumber
	local iftotalweight
	local probability
	local old_device
	local old_iface
	local old_weight
	local nf_mark

	config_get proto $1 proto
	config_get_bool equalize $1 equalize 0
	config_get src_ip $1 src_ip 0.0.0.0/0
	config_get src_port $1 src_port 0:65535
	config_get dest_ip $1 dest_ip 0.0.0.0/0
	config_get dest_port $1 dest_port 0:65535
	config_get current_policy $1 use_policy

	if [ $current_policy = default ]; then
		nf_mark=128
	else
		eval nf_mark=$(echo '$'mwp$current_policy)
	fi

	lowest_metric=$(ip route list table $(($nf_mark+1000)) | grep -m 1 default | egrep -o 'metric [0-9]{1,9}' | awk '{print $2}')
	equalize_ifaces=$(ip route list table $(($nf_mark+1000)) | awk '/default  metric ('$lowest_metric')/ {flag=1;next} /default/{flag=0} flag { print }' | sed 's/.*dev \([^ ]*\) .*/\1/')
	rulenumber=$(($(iptables -L mwan3_rules -t mangle -n | wc -l)-1))
	iftotalweight=0

	if [ $equalize -eq 1 ] && [ -n "$equalize_ifaces" ]; then
		for old_device in $equalize_ifaces; do
			mwan3_get_weight_iface
			iftotalweight=$(($old_weight+$iftotalweight))
			eval ifvalue=$(echo '$'mwif$old_iface)

			probability=$(($old_weight*1000/$iftotalweight))
			if [ $probability -lt 10 ]; then
				probability="0.00${probability}"
				elif [ $probability -lt 100 ]; then
				probability="0.0${probability}"
				elif [ $probability -lt 1000 ]; then
				probability="0.${probability}"
			else
				probability="1"
			fi

			probability="-m statistic --mode random --probability ${probability}"
			mwan3_add_iptables_rule
		done
	else
		ifvalue=$nf_mark
		mwan3_add_iptables_rule
	fi
}

mwan3_default_iptables_rules()
{
	iptables -F mwan3_default -t mangle
	iptables -A mwan3_default -t mangle -d 224.0.0.0/3 -m mark ! --mark 32768/32768 -j MARK --set-xmark 32768/32768

	for local_networks in $(ip -f inet route list table main scope link | awk '{print $1}' | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}'); do
		iptables -A mwan3_default -t mangle -d $local_networks -m mark ! --mark 32768/32768 -j MARK --set-xmark 32768/32768 &> /dev/null
	done
}

mwan3_interface_route_args()
{
	unset route_args

	if [ -z "$route_args" ]; then
		route_args=$(eval echo $(ip route list scope global dev $DEVICE 0.0.0.0/0 | grep "^default" | awk '{print "nexthop",$2,$3}'))
	fi

	if [ -z "$route_args" ]; then
		route_args=$(eval echo $(ip route list dev $DEVICE 0.0.0.0/0 | grep "^default  scope" | awk '{print "nexthop","dev",("'$DEVICE'")}'))
	fi
}

mwan3_update_basic_interface_route_table()
{
	mwan3_interface_route_args
	ip route flush table $(($interface_number+1000))
	ip route add table $(($interface_number+1000)) default $route_args

	for c in $(ip rule list | awk '$1 == ( "'$(($interface_number+1007)):'" )' | awk '{print $1}'); do
		ip rule del pref $(($interface_number+1007))
	done

	ip rule add pref $(($interface_number+1007)) fwmark $(($interface_number*256))/65280 table $(($interface_number+1000))
}

mwan3_policy_routes()
{
	if [ $(uci get -P /var/state mwan3.$1.interface) = $INTERFACE ]; then
		metric=$(uci get -P /var/state mwan3.$1.metric)
		weight=$(uci get -P /var/state mwan3.$1.weight)

		unset old_args
		mwan3_interface_route_args

		if [ -z "$old_args" ]; then
			old_args=$(eval echo $(ip route list table $policy_number | awk '/default  metric ('$metric')/ {flag=1;next} /default/{flag=0} flag { print }' | awk '$1 == "nexthop"' | grep -v "dev $DEVICE " | sort -u))
		fi

		if [ -z "$old_args" ]; then
			old_device=$(eval echo $(ip route list table $policy_number 0.0.0.0/0 | grep "^default via" | awk '$5 != ("'$DEVICE'")' | awk '$7 == ("'$metric'")' | sed 's/.*dev \([^ ]*\) .*/\1/'))

			if [ -n "$old_device" ]; then
				mwan3_get_weight_iface
				old_args=$(eval echo $(ip route list table $policy_number 0.0.0.0/0 | grep "^default via" | awk '$5 != ("'$DEVICE'")' | awk '$7 == ("'$metric'")' | awk '{print "nexthop",$2,$3,"weight","$old_weight"}'))
			fi
		fi

		ip route del table $policy_number metric $metric default &> /dev/null

		[ $ACTION = "ifdown" ] && ip route add table $policy_number metric $metric default $old_args &> /dev/null
		[ $ACTION = "ifup" ] && ip route add table $policy_number metric $metric default $route_args weight $weight $old_args &> /dev/null

		unset metric
		unset weight
		unset old_args
		unset old_device
		unset old_iface
		unset old_weight
	fi

	[ $ACTION = "ifup" ] && ip route add table $policy_number blackhole default metric 1000 &> /dev/null
}

mwan3_update_policy_route_tables()
{
	total_policies=$(($total_policies+1))
	policy_number=$(($total_policies+1015))
	eval mwp$1=$(($policy_number-1000))
	current_policy=$1

	config_list_foreach $1 use_member mwan3_policy_routes

	ip rule del pref $policy_number &> /dev/null

	if [ -n "$(ip route list table $policy_number 0.0.0.0/0)" ]; then
		ip rule add pref $policy_number fwmark $((($policy_number-1000)*256))/65280 table $policy_number &> /dev/null
	fi
}

mwan3_get_interfaces()
{
	total_interfaces=$(($total_interfaces+1))
	config_get_bool enabled $1 enabled
	[ "$enabled" = "1" ] || return 0
	eval mwif$1=$total_interfaces
	[ "$1" = "$INTERFACE" ] || return 0
	interface_number=$total_interfaces

	local wait
	wait=0

	while [ $ACTION = "ifup" ] && [ -z "$(ip route list table main 0.0.0.0/0 dev $DEVICE)" ] && [ "$wait" -lt 5 ] ; do
		wait=$((wait+1))
		[ "$wait" -lt 5 ] && sleep $wait

		if [ "$wait" -ge 5 ] ; then
			logger "mwan3: No gateway found for interface $INTERFACE ($DEVICE)" && return 0
		fi
	done

	check_iface=1
}

mwan3_ifupdown()
{
	[ -n $DEVICE ] || exit 0
	[ -n $INTERFACE ] || exit 0

	config_load mwan3
	config_foreach mwan3_get_interfaces interface

	[ "$check_iface" = "1" ] || exit 0
	[ "$total_interfaces" -le "7" ] || exit 0

	while [ $(pgrep -f -o /sbin/hotplug-call) -ne $$ ]; do
		sleep 1
	done

	logger "mwan3: $ACTION interface $INTERFACE ($DEVICE)"

	mwan3_setup_basic_iptables_rules
	mwan3_update_basic_interface_route_table
	config_foreach mwan3_update_policy_route_tables policy
	mwan3_default_iptables_rules
	config_foreach mwan3_update_policy_iptables_rules rule

	[ $ACTION = "ifup" ] && mwan3_track
}

case "$ACTION" in
	ifup|ifdown)
		mwan3_ifupdown
	;;
esac
